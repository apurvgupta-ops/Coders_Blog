import { getArticles, getCategories } from "@/Http";
import { GetServerSideProps } from "next";
import { AxiosResponse } from "axios";
import {
  IArticle,
  ICategory,
  ICollectionResponse,
  IPagination,
  IQueryOptions,
} from "@/Types";
import Head from "next/head";
import React from "react";
import CategoriesTabs from "@/Components/CategoriesTabs";
import qs from "qs";
import Articles from "@/Components/Articles";
import { capitalFirstLetter, debounce, removeDash } from "@/utils";
import Pagination from "@/Components/Pagination";
import { useRouter } from "next/router";

interface IPropType {
  categories: {
    items: ICategory[];
    pagination: IPagination;
  };

  articles: {
    items: IArticle[];
    pagination: IPagination;
  };

  slug: string;
}

const Category = ({ categories, articles, slug }: IPropType) => {
  const { page, pageCount } = articles.pagination;

  const router = useRouter();
  const { category: categorySlug } = router.query;

  const formattedTitle = () => {
    return capitalFirstLetter(removeDash(slug));
  };

  const handleSearch = (query: string) => {
    router.push(`/category/${categorySlug}/?search=${query}`);
  };

  return (
    <div>
      <Head>
        <title>Coders Blog {formattedTitle()}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* //Articles Based on category */}
      <CategoriesTabs
        categories={categories.items}
        handleSearch={debounce(handleSearch, 500)}
      />

      <Articles articles={articles.items} />

      <Pagination
        page={page}
        pageCount={pageCount}
        redirectUrl={`/category/${categorySlug}`}
      />
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const options: Partial<IQueryOptions> = {
    populate: ["author.avatar"],
    sort: ["id:desc"],
    filters: {
      category: {
        Slug: query.category,
      },
    },
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1,
    },
  };

  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search,
      },
    };
  }

  const queryString = qs.stringify(options);

  //Categories
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await getCategories();

  //Articles
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await getArticles(queryString);

  // console.log(categories);
  return {
    props: {
      categories: {
        items: categories.data,
        pagination: categories.meta.pagination,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },

      slug: query.category,
    },
  };
};
export default Category;
